@page "/status"

<h3>Status</h3>

@foreach (var apistatus in States)
{
	<p>@apistatus.Key : <span class="@GetStateClass(@apistatus.Value)">@apistatus.Value</span></p>
}

@code {

	/// <summary>
	/// NazevAPI, status
	/// </summary>
	Dictionary<string, string> States = new Dictionary<string, string>()
	{
	};

	private System.Timers.Timer _timer;

	protected override async Task OnInitializedAsync()
	{
		await Task.Delay(TimeSpan.FromSeconds(5));
		await ReadStatus();

		_timer = new System.Timers.Timer(10000);
		_timer.Elapsed += async (sender, e) =>
		{
			await ReadStatus();
			StateHasChanged();
		};
		_timer.AutoReset = true;
		_timer.Start();
	}

	private async Task ReadStatus()
	{
		HttpClient client = new HttpClient();

		foreach (var endpoint in Data.Endpoints.ServicesEndpoint)
		{
			string status = "";
			try
			{
				status = await client.GetStringAsync($"{endpoint.Value}/health");
			}
			catch (Exception ex)
			{
				// log
				status = "Endpoint error";
			}

			if (States.ContainsKey(endpoint.Key))
			{
				States[endpoint.Key] = status;
			}
			else
			{
				States.Add(endpoint.Key, status);
			}
		}
	}

	public void Dispose()
	{
		_timer?.Dispose();
	}

	private string GetStateClass(string status)
	{
		if (string.IsNullOrEmpty(status))
		{
			return "";
		}

		switch (status.ToUpper())
		{
			case "HEALTHY":
				return "text-success";
			case "UNHEALTHY":
			case "DB DISCONNECT":
			case "ENDPOINT ERROR":
				return "text-danger";
			case "WARN":
				return "text-warning";
			default:
				return "text-info";
		}
	}
}
